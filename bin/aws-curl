#!/usr/bin/env bash
#
# Generic curl on AWS
# (c) 2016 Emil Lerch <emil@lerch.org>
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

set -euo pipefail

readonly PROJECT_PATH=$( cd $(dirname $0) ; cd ../; pwd -P )
readonly SCRIPT_NAME="$(basename $0)"

# Includes
source ${PROJECT_PATH}/lib/s3-common.sh

##
# Print help and exit
# Arguments:
#   $1 int exit code
# Output:
#   string help
##
printUsageAndExitWith() {
  printf "Usage:\n"
  printf "  ${SCRIPT_NAME} [-vi] [-k key] [-s file] [-r region] resource_path\n"
  printf "  ${SCRIPT_NAME} -h\n"
  printf "Example:\n"
  printf "  ${SCRIPT_NAME} -k key -s secret -r eu-central-1 /bucket/file.ext\n"
  printf "Options:\n"
  printf "     --debug\tEnable debugging mode\n"
  printf "  -h,--help\tPrint this help\n"
  printf "  -i,--insecure\tUse http instead of https\n"
  printf "  -k,--key\tAWS Access Key ID. Default to environment variable AWS_ACCESS_KEY_ID\n"
  printf "  -r,--region\tAWS S3 Region. Default to environment variable AWS_DEFAULT_REGION\n"
  printf "  -v,--verbose\tVerbose output\n"
  printf "     --version\tShow version\n"
  exit $1
}

##
# Parse command line and set global variables
# Arguments:
#   $@ command line
# Globals:
#   AWS_ACCESS_KEY_ID     string
#   AWS_SECRET_ACCESS_KEY string
#   AWS_REGION            string
#   RESOURCE_PATH         string
#   VERBOSE               bool
#   INSECURE              bool
#   DEBUG                 bool
##
parseCommandLine() {
  # Init globals
  AWS_PROFILE="default"
  AWS_REGION=${AWS_DEFAULT_REGION:-$(getDefaultRegionFromProfile $AWS_PROFILE)}
  VERBOSE=false
  INSECURE=false
  DEBUG=false
  OPTIONS=()
  METHOD="GET"

  # Parse options
  local remaining=
  local secretKeyFile=
  while [[ $# > 0 ]]; do
    local key="$1"
    case ${key} in
      --version)       showVersionAndExit;;
      --debug)         DEBUG=true;;
      -h|--help)       printUsageAndExitWith 0;;
      -v|--verbose)    VERBOSE=true;;
      -i|--insecure)   INSECURE=true;;
      -X|--request)    assertArgument $@; METHOD=$2; OPTIONS+=("-X" "$2"); shift;;
      -H|--header)     assertArgument $@; OPTIONS+=("-H" "$2"); shift;;
      -p|--profile)    assertArgument $@; AWS_PROFILE=$2; shift;;
      -T|--upload-file) assertFileExists $2; OPTIONS+=("-T" "$2"); shift;;
      -I|--head)       OPTIONS+=("-I");;
      -s)              OPTIONS+=("-s");;
      -*)              $DEBUG && echo "Warn: unknown option $1"
                       OPTIONS+=("$1" "$2"); shift;;
      *)               remaining="${remaining} \"${key}\"";;
    esac
    shift
  done

  AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-$(getAccessKeyFromAWSCredentials $AWS_PROFILE)}
  AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-$(getSecretFromAWSCredentials $AWS_PROFILE)}

  # Set the non-parameters back into the positional parameters ($1 $2 ..)
  eval set -- ${remaining}

  # Parse arguments
  if [[ $# != 1 ]]; then
    err "You need to specify the endpoint URL" 
    printUsageAndExitWith ${INVALID_USAGE_EXIT_CODE}
  fi

  RESOURCE_PATH="$1"

  if [[ -z "${AWS_ACCESS_KEY_ID}" ]]; then
    err "AWS Access Key ID not specified"
    printUsageAndExitWith ${INVALID_USAGE_EXIT_CODE}
  fi
  if [[ -z "${AWS_SECRET_ACCESS_KEY}" ]]; then
    err "AWS Secret Access Key not specified"
    printUsageAndExitWith ${INVALID_USAGE_EXIT_CODE}
  fi

  # Freeze globals
  readonly AWS_REGION
  readonly AWS_PROFILE
  readonly AWS_ACCESS_KEY_ID
  readonly AWS_SECRET_ACCESS_KEY
  readonly RESOURCE_PATH
  readonly DEBUG
  readonly VERBOSE
  readonly INSECURE
  readonly OPTIONS
}

##
# Main routine
##
main() {
  checkEnvironment
  parseCommandLine "$@"
  performGenericRequest
}

main "$@"

